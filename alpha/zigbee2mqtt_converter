'{"time":{"exactTime":true,"start":"23:00"},"period":{"weeks":1,"dows":"[6]"}}'
/*
 * Script for managing zigbee2mqtt states at adapter MQTT client by adapter iobroker.javascript
 *
 * Script-Basiskonfiguration:
 */
// ioBroker Instanz der relevanten Adapter JavaScript & MQTT
const ioAdapterJS = 'javascript.0'
const ioAdapterMQTT = 'mqtt.0'
const ioAdapterHistory = 'history.0'
const ioAdapterLovelace = 'lovelace.0'
// ioBroker MQTT Adapter: Namespace der ZigBee2MQTT Objekte
const namespaceMQTT = 'zigbee2mqtt'
// ioBroker JavaScript Adapter: Namespace der Virtuellen Geräte Objekte
const namespaceJS = ""
// ZigBee Base Topic (by default "zigbee2mqtt")
const zigbeeBaseTopic = 'zigbee2mqtt'

/*
 * Geräte-Basiskonfiguration:
 * Jeder Gerätetyp ist einzeln zu erfassen. Struktur ist verwandt wie bei VirtualDevice-Config.
 * 
 * common: {type: 'number', read: true, write: false, role: 'indicator', unit: '%', min: 'value', max: 'value'}
 * parameters - see: https://github.com/ioBroker/ioBroker.docs/blob/master/docs/en/dev/objectsschema.md
 * state.role - see https://github.com/ioBroker/ioBroker/blob/master/doc/STATE_ROLES.md
 * 
 * zigbee2mqtt bridge properties:
 * topic 'zigbee2mqtt/bridge/config'
 * payload '{"commit":"6b32f306", "coordinator": {
 *  "meta":{"maintrel":1,"majorrel":2,"minorrel":7,"product":1,"revision":20201026,"transportrev":2}
 *  "type":"zStack3x0"},
 *  "log_level":"info",
 *  "network":{"channel":15,"extendedPanID":"0xdddddddddddddddd","panID":6754},
 *  "permit_join":false,
 *  "version":"1.16.1"}'
 */ 
let deviceConfigs = {
    'sonoff_snzb-02': {
        namespace: 'sensor', // Ziel-Ordner der Objekt-Kopie (Root-Ordner ist ioAdapterJS + namespaceJS)
        common: { role: 'sensor', },
        native: { type: 'weather sensor', },
        states: {
            'temperature': {
                common: { type: 'number', read: true, write: false, role: 'value.temperature', unit: '°C'},
                enableHistory: true,
                enableLovelace: true,
            },
            'humidity': {
                common: { type: 'number', read: true, write: false, role: 'value.humidity', unit: '%'},
                modifyValueOnRead: function (val) { return (val+10); },
                enableHistory: true,
                enableLovelace: true,
            },
            'linkquality': {
                common: { type: 'number', read: true, write: false, role: 'indicator', unit: ''},
                enableLovelace: true,
            },
            'battery': {
                common: { type: 'number', read: true, write: false, role: 'value.battery', unit: '%'},
                enableLovelace: true,
            },
            'voltage': {
                common: { type: 'number', read: true, write: false, role: 'value.voltage', unit: 'V'},
            },
            'last_seen': {
                common: { type: 'string', read: true, write: false, role: 'date', unit: ''},
            },
        },
    },
    'sonoff_snzb-01': {
        namespace: 'button',
        common: { role: 'button', },
        native: { type: 'button', },
        states: {
            'action': {
                common: { type: 'string', read: true, write: false, role: 'button', unit: 'pressed'},
            },
            'linkquality': {
                common: { type: 'number', read: true, write: false, role: 'indicator', unit: ''},
            },
            'battery': {
                common: { type: 'number', read: true, write: false, role: 'value.battery', unit: '%'},
            },
            'voltage': {
                common: { type: 'number', read: true, write: false, role: 'value.voltage', unit: 'V'},
            },
            'last_seen': {
                common: { type: 'string', read: true, write: false, role: 'date', unit: ''},
            },
        },
    },
    'sonoff_basiczbr3': {
        namespace: 'switch',
        common: { role: 'switch', },
        native: { type: 'switch', },
        states: {
            'state': {
                common: { type: 'string', read: true, write: true, role: 'switch.power', unit: ''},
                enableLovelace: true,
            },
            'linkquality': {
                common: { type: 'number', read: true, write: false, role: 'indicator', unit: ''},
                enableLovelace: true,
            },
            'last_seen': {
                common: { type: 'string', read: true, write: false, role: 'date', unit: ''},
            },
        },
    },
    'aqara_ssm-u01': {
        namespace: 'switch',
        common: { role: 'switch', },
        native: { type: 'switch', },
        states: {
            'state': {
                common: { type: 'boolean', read: true, write: true, role: 'switch.power', unit: ''},
                modifyValueOnRead: function (val) { return (val == 'ON' ? true : false); },
                modifyValueOnSet: function (val) { return (val ? 'ON' : 'OFF') },
                enableLovelace: true
            },
            'energy': {
                common: { type: 'number', read: true, write: false, role: 'value.power.consumption', unit: 'kWh'},
                enableHistory: true
            },
            'power': {
                common: { type: 'number', read: true, write: false, role: 'value.power', unit: 'W'},
            },
            'device_temperature': {
                common: { type: 'number', read: true, write: false, role: 'value.temperature', unit: '°C'},
                enableHistory: true,
                enableLovelace: true,
            },
            'linkquality': {
                common: { type: 'number', read: true, write: false, role: 'indicator', unit: ''},
                enableLovelace: true,
            },
            'last_seen': {
                common: { type: 'string', read: true, write: false, role: 'date', unit: ''},
            },
        },
    },
    'gledopto_gl-c-006': {
        namespace: 'switch',
        common: { role: 'switch.light', },
        native: { type: 'LED controller', },
        states: {
            'state': {
                common: { type: 'string', read: true, write: true, role: 'switch.light', unit: ''},
                enableLovelace: true,
            },
            'brightness': {
                common: { type: 'number', read: true, write: true, role: 'level.dimmer', unit: '', min: 0, max: 254},
                enableLovelace: true,
            },
            /*
            Mired color temperature:
            - 153 (blue, 6500K)
            - 500 (yellow, 2000K)
            https://de.wikipedia.org/wiki/Mired
            */
            'color_temp': {
                common: { type: 'number', read: true, write: true, role: 'level.color.temperature', unit: 'mired', min: 153, max: 500},
                enableLovelace: true,
            },
            /*
            Trigger effect on a device (e.g. bulb blinks)
            Zigbee2MQTT Supported: blink, breathe, okay, channel_change, finish_effect and stop_effect
            */
            'effect': {
                common: { type: 'string', read: true, write: true, role: 'state', unit: ''},
                enableLovelace: true,
            },
            'linkquality': {
                common: { type: 'number', read: true, write: false, role: 'indicator', unit: ''},
                enableLovelace: true,
            },
            'last_seen': {
                common: { type: 'string', read: true, write: false, role: 'date', unit: ''},
            },
        },
    },
    /*
    Gledopto GL-C-007-2ID
    {"brightness":0,"brightness_white":254,"last_seen":"2021-03-06T11:45:21+01:00","linkquality":42,"state_rgb":"OFF","state_white":"OFF"}
    */
    'gledopto_gl-c-007-2id': {
        namespace: 'switch',
        common: { role: 'switch.light', },
        native: { type: 'LED controller', },
        states: {
            'state_white': {
                common: { type: 'string', read: true, write: true, role: 'switch.light', unit: ''},
                enableLovelace: true,
            },
            'brightness_white': {
                common: { type: 'number', read: true, write: true, role: 'level.dimmer', unit: '', min: 0, max: 254},
                enableLovelace: true,
            },
            'state_rgb': {
                common: { type: 'string', read: true, write: true, role: 'switch.light', unit: ''},
                enableLovelace: true,
            },
            'brightness': {
                common: { type: 'number', read: true, write: true, role: 'level.dimmer', unit: '', min: 0, max: 254},
                enableLovelace: true,
            },
            'linkquality': {
                common: { type: 'number', read: true, write: false, role: 'indicator', unit: ''},
                enableLovelace: true,
            },
            'last_seen': {
                common: { type: 'string', read: true, write: false, role: 'date', unit: ''},
            },
        },
    },
    /*
    zigbee_cc2531_r001
    {"last_seen":"2021-02-14T16:42:53+01:00","led":false,"linkquality":48}
    */
    'zigbee_cc2531': {
        namespace: 'router',
        common: { role: 'router', },
        native: { type: 'ZigBee router', },
        states: {
            'led': {
                common: { type: 'boolean', read: true, write: false, role: 'indicator', unit: ''},
            },
            'linkquality': {
                common: { type: 'number', read: true, write: false, role: 'indicator', unit: ''},
                enableLovelace: true,
            },
            'last_seen': {
                common: { type: 'string', read: true, write: false, role: 'date', unit: ''},
            },
        },
    }
}

//////////////////// Main Script ////////////////////
let readObjIDs = [];
let writeObjIDs = [];

var pathSrc = ioAdapterMQTT + (namespaceMQTT.valueOf() !== '' ? '.' + namespaceMQTT : '');
var pathDst = ioAdapterJS + (namespaceJS.valueOf() !== '' ? '.' + namespaceJS : '');

/*
 * # Aktueller Strukturbaum:
 * adapter.adapterInstance.deviceType.device.state
 * 
 * # ioBroker Strukturbaum (gem. https://www.iobroker.net/#de/documentation/dev/objectsschema.md):
 * adapter.adapterInstance.device.channel.state
 * - Jeder Datenpunkt muss durch ein Objekt vom Typ "state" dargestellt werden, das Metadaten für den Datenpunkt enthält.
 * - state - Datenpunkt - parent should be of type channel, device, instance or host
 * - channel - object to group one or more states. Parent should be device.
 * - device - object to group one or more channels or state. Should have no parent except adapter instance namespace.
*/

/*
 * Creating virtual devices based on MQTT devices
 */
$("[id=" + pathSrc + ".*]").each(function (mqttObjID) {
    // eg. objID: mqtt.0.zigbee2mqtt.sonoff_snzb-02_s001
    // objDeviceType: everythin between the last dot and the last underscore
    // https://stackoverflow.com/questions/31262539/how-can-i-extract-text-from-the-middle-of-a-string-with-javascript
    var objDeviceType = mqttObjID.match(/([a-z0-9-_]+)_[a-z0-9]{4,7}$/i);
        
    if(objDeviceType && Object.keys(deviceConfigs).indexOf(objDeviceType[1] ) >= 0){
        /*
         * Create new virtual device and its states
        */
        // Make a copy of device template
        let deviceCfg = deviceConfigs[objDeviceType[1]];
        if(!deviceCfg.hasOwnProperty('common')) deviceCfg.common = {};
        if(!deviceCfg.hasOwnProperty('native')) deviceCfg.native = {};

        // Define device-specific parameters
        deviceCfg.common.name = getObject(mqttObjID).common.name.replace(zigbeeBaseTopic + '/', '');

        // Create new virtual device (folder)
        var deviceID = pathDst +
            (deviceCfg.namespace && deviceCfg.namespace !== '' ? '.' + deviceCfg.namespace : '') +
            '.' + deviceCfg.common.name;
        
        log('Creating object for virtual device ' + deviceID, 'debug');
        
        extendObject(deviceID, {
                type: "device",
                common: deviceCfg.common,
                native: deviceCfg.native
            },
            function (err) {
                if (err) {
                    log('Could not create object for virtual device: ' + deviceID, 'warn');
                    return;
                }
                log('Object has been created: ' + deviceID, 'debug');
            });
        
        // Create states of the new virtual device (state)
        // Iterate through any Device-Type-defined States
        for (let deviceState in deviceCfg.states) {
            var deviceStateID = deviceID + '.' + deviceState;

            // { type: 'state', } -> gesetzt durch createState()
            var deviceStateObj = { common: {}, native: {} };
            deviceStateObj.common.name = deviceCfg.common.name + '.' + deviceState;
            if (typeof deviceCfg.states[deviceState].common === 'object') {
                deviceStateObj.common = Object.assign(deviceStateObj.common, deviceCfg.states[deviceState].common);
            }
            if (typeof deviceCfg.states[deviceState].native === 'object') {
                deviceStateObj.native = Object.assign(deviceStateObj.native, deviceCfg.states[deviceState].native);
            }
            // Reset custom integrations
            deviceStateObj.common.custom = {};

            if (!existsState(deviceStateID)){
                log('Creating device state: ' + deviceStateID, 'debug');

                /*
                 * Activate lovelace integration for device state
                 * see: https://github.com/ioBroker/ioBroker.lovelace
                 * 
                 * Manuel mode:
                 * The type of entity must be provided and optionally the name of object.
                 * With this method only simple entities, like input_number, input_text or input_boolean could be created. It may not have more than one state or attribute.
                 * 
                 * Configurable in the GUI are:
                 * - editable/writable: input_number, input_text, input_boolean, input_select (list)
                 * - readable: sensor, switch, light, automation
                 */
                if(deviceCfg.states[deviceState].enableLovelace) {
                    deviceStateObj.common.custom[ioAdapterLovelace] = {
                        enabled: true,
                        entity: deviceCfg.common.role, // Set to device role for alle device states
                        /* BUG: entity: common.role doesn't work, because "input_number", "input_text" or "input_boolean" respectively are allowed. */
                        name: (deviceCfg.common.name + '_' + deviceState).replace('-', '_'), // Lovelace don't work with dashes '-'
                    }
                }

                /*
                 * Activate history integration for device state
                 * see https://github.com/ioBroker/ioBroker.history/blob/master/docs/en/README.md
                 */
                if(deviceCfg.states[deviceState].enableHistory) {
                    deviceStateObj.common.custom[ioAdapterHistory] = {
                        enabled: true,
                        changesOnly: true,
                        debounce: 1000, // Entprellzeit in ms (= 1 sec)
                        changesRelogInterval: 0, // without a change, don't log again (x>0 = every x sec a new log entry creation will be forced)
                        changesMinDelta: 0, // any size of change will be logged (0 = no delta until new log entry)
                        retention: 31536000, // 1 year
                        maxLength: 3, // number of entries in RAM
                        aliasId: '',
                    }
                }
                
                createState(deviceStateID, deviceStateObj.common, deviceStateObj.native,
                    function (err) {
                        if (err) {
                            log('Creation of device state skipped:' + deviceStateID, 'warn');
                            return;
                        }
                        log('Device state has been created: ' + deviceStateID, 'debug');
                    });
            } else {
                log('Device state already exists: ' + deviceStateID, 'debug');
            }

            /*
             * Activate MQTT object updating mechanism for device state, if common attribute "write" is true
             */ 
            if (deviceStateObj.common.write) {
                // Add state of virtual device to subscription list for setting states of the MQTT object
                log('Add device state to subscription list <write>: ' + deviceStateID, 'debug');
                
                writeObjIDs.push(deviceStateID);
            }
        }

        // Add MQTT object to subscription list for updating states of the new device
        readObjIDs.push(mqttObjID);
    } else {
        log('Undefined device type found for object: ' + mqttObjID, 'info');
    }
});

/*
 * If anything of MQTT object changes, update its virtual device
 */
on({ id: readObjIDs, change: "any", from: "system.adapter." + ioAdapterMQTT }, function (mqttObj) {
    /*
     * Find matching virtual device of the MQTT object
     */
    var deviceID = '';
    let deviceCfg = {};

    var objDeviceType = mqttObj.id.match(/([a-z0-9-_]+)_[a-z0-9]{4,7}$/i);
    
    if(objDeviceType && Object.keys(deviceConfigs).indexOf(objDeviceType[1]) >= 0){
        // Make a copy of device template
        deviceCfg = deviceConfigs[objDeviceType[1]];
        
        deviceID = pathDst +
            (deviceCfg.namespace && deviceCfg.namespace !== '' ? '.' + deviceCfg.namespace : '') +
            '.' + mqttObj.id.match(/([a-z0-9-_]+_[a-z0-9]{4,7})$/i)[1];
    } else {
        log('Fatal error: Object subscribed, without matching device type', 'error');
        return;
    }
    
    /*
     * Parse JSON value of MQTT object
     */
    let objStateValueParsed = JSON.parse(mqttObj.state.val);

    /*
     * Change states of the matching virtual device
     */
    Object.keys(objStateValueParsed).forEach(function(stateName){
        if (getState(deviceID + '.' + stateName).notExist){
            log('State is unknown by virtual device, please check your device configuration: ' + deviceID + '.' + stateName, 'info');
        }else{
            if(typeof deviceCfg.states[stateName].modifyValueOnRead === 'function') {
                objStateValueParsed[stateName] = deviceCfg.states[stateName].modifyValueOnRead(objStateValueParsed[stateName]);
            }
            setState(deviceID + '.' + stateName, objStateValueParsed[stateName], true);
        };
    });

});

/*
 * If anything of virtual device changes, update its MQTT object
 */
on({ id: writeObjIDs, change: "any", fromNe: "system.adapter." + ioAdapterJS }, function (deviceState) {
    /*
     * deviceState:
     * {"id":"javascript.0.switch.sonoff_basiczbr3_sw001.state",
    "newState":{"val":"ON","ts":1640815381217,"ack":true,"lc":1640792452103,"from":"system.adapter.javascript.0","q":0},
    "oldState":{"val":"ON","ts":1640813581179,"ack":true,"lc":1640792452103,"from":"system.adapter.javascript.0","q":0},
    "state":{"val":"ON","ts":1640815381217,"ack":true,"lc":1640792452103,"from":"system.adapter.javascript.0","q":0}}
     */
    
    var deviceName = deviceState.id.match(/.([a-z0-9-_]+_[a-z0-9]{4,7})./i)[1];
    var deviceType = deviceState.id.match(/.([a-z0-9-_]+)_[a-z0-9]{4,7}./i)[1];
    var deviceStateName = deviceState.id.match(/([a-z0-9-_]+)$/i)[1];
    var deviceStateVal = deviceState.state.val;
    
    let deviceCfg = {};
    
    if(deviceType && Object.keys(deviceConfigs).indexOf(deviceType) >= 0){
        // Make a copy of device template
        deviceCfg = deviceConfigs[deviceType];
    } else {
        log('Fatal error: Object subscribed, without matching device type', 'error');
        return;
    }

    /*
     * Send a MQTT message for the matching MQTT object (channel "set")
     * https://forum.iobroker.net/topic/28951/mqtt-publish-mit-js-an-mqtt-mosquitto-broker/3
     */
    if(typeof deviceCfg.states[deviceStateName].modifyValueOnSet === 'function') {
        deviceStateVal = deviceCfg.states[deviceStateName].modifyValueOnSet(deviceStateVal);
    }
    sendTo(ioAdapterMQTT, 'sendMessage2Client', { topic: zigbeeBaseTopic + '/' + deviceName + '/set/' + deviceStateName, message: '' + deviceStateVal });
    log('Send message to MQTT client: { topic:' + zigbeeBaseTopic + '/' + deviceName + '/set/' + deviceStateName + ', message: ' + deviceStateVal + '}', 'debug');
});

